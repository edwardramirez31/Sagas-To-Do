{"version":3,"sources":["app/selectors/tasks.ts","app/slices/taskSlice.ts","components/Form.tsx","components/Task.tsx","containers/Tasks.tsx","App.tsx","axiosInstance.ts","api/djangoTodo.ts","app/sagas/tasks/tasks.ts","app/sagas/index.ts","app/index.ts","index.tsx"],"names":["getTasks","state","task","tasks","getTasksLoading","loading","taskSlice","createSlice","name","initialState","error","reducers","addTask","_action","addTaskSuccess","action","payload","isUpdating","addTaskError","getTask","getTaskSuccess","map","item","getTaskError","removeTask","filter","id","setIsUpdating","newTasks","updateTask","updateTaskSuccess","text","actions","Form","dispatch","useDispatch","formSchema","Yup","shape","required","initialValues","validationSchema","onSubmit","data","helpers","completed","resetForm","values","errors","touched","handleChange","handleSubmit","handleBlur","style","display","alignItems","justifyContent","TextField","label","width","value","onChange","Boolean","helperText","onBlur","Button","type","variant","color","endIcon","Icon","Task","useState","setText","ListItem","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","onClick","ListItemText","event","target","fullWidth","Typography","ListItemSecondaryAction","IconButton","Save","Edit","DeleteForever","Tasks","useSelector","useEffect","length","List","App","isLoading","className","Container","maxWidth","Paper","padding","LinearProgress","axiosInstance","axios","create","baseURL","DjangoTodo","get","response","delete","put","post","addTaskSaga","getTaskSaga","removeTaskSaga","updateTaskSaga","tasksSaga","call","newTask","message","console","log","all","takeEvery","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","taskReducer","middleware","getDefaultMiddleware","thunk","concat","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02958848.chunk.js","sourcesContent":["import type { Selector } from '../types/redux';\nimport type { Task } from '../slices/taskSlice';\n\nexport const getTasks: Selector<Task[]> = (state): Task[] => state.task.tasks;\n\nexport const getTasksLoading: Selector<boolean> = (state): boolean => state.task.loading;\n","import { createSlice } from '@reduxjs/toolkit';\nimport type { PayloadAction } from '@reduxjs/toolkit';\n\nexport interface DjangoTask {\n  text: string;\n  completed: boolean;\n  id: number;\n}\n\nexport interface Task {\n  text: string;\n  completed: boolean;\n  id: number;\n  isUpdating: boolean;\n}\n\ninterface InitialState {\n  tasks: Task[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: InitialState = {\n  tasks: [],\n  loading: false,\n  error: null,\n};\n\nexport const taskSlice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    addTask: (state, _action: PayloadAction<{ text: string; completed: boolean }>) => {\n      state.loading = true;\n    },\n    addTaskSuccess: (state, action: PayloadAction<DjangoTask>) => {\n      // { id: 1, text: \"Hello\", completed: false }\n      state.tasks = [...state.tasks, { ...action.payload, isUpdating: false }];\n      state.loading = false;\n    },\n    addTaskError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    getTask: (state) => {\n      state.loading = true;\n    },\n    getTaskSuccess: (state, action: PayloadAction<Array<DjangoTask>>) => {\n      // { id: 1, text: \"Hello\", completed: false }\n      const tasks = action.payload.map((item) => ({ ...item, isUpdating: false }));\n      state.tasks = [...state.tasks, ...tasks];\n      state.loading = false;\n    },\n    getTaskError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    removeTask: (state, action: PayloadAction<number>) => {\n      state.tasks = state.tasks.filter((task) => task.id !== action.payload);\n    },\n    setIsUpdating: (state, action: PayloadAction<number>) => {\n      const newTasks = state.tasks.map((task) =>\n        task.id === action.payload ? { ...task, isUpdating: true } : task\n      );\n      state.tasks = newTasks;\n    },\n    updateTask: (state, _action: PayloadAction<DjangoTask>) => {\n      state.loading = false;\n    },\n    updateTaskSuccess: (state, action: PayloadAction<DjangoTask>) => {\n      const task = action.payload;\n      const newTasks = state.tasks.map((item) => {\n        if (item.id === task.id) {\n          return {\n            ...task,\n            task: task.text,\n            isUpdating: false,\n          };\n        }\n        return item;\n      });\n      state.tasks = newTasks;\n      state.loading = false;\n    },\n  },\n});\n\nexport const {\n  addTask,\n  addTaskSuccess,\n  addTaskError,\n  getTask,\n  getTaskSuccess,\n  getTaskError,\n  removeTask,\n  setIsUpdating,\n  updateTask,\n  updateTaskSuccess,\n} = taskSlice.actions;\n\nexport default taskSlice.reducer;\n","import { Button, TextField } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { addTask } from '../app/slices/taskSlice';\n\nconst Form: React.VFC = () => {\n  const dispatch = useDispatch();\n\n  const formSchema = Yup.object().shape({\n    text: Yup.string().required('This is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        text: '',\n      }}\n      validationSchema={formSchema}\n      onSubmit={(data, helpers): void => {\n        dispatch(addTask({ ...data, completed: false }));\n        helpers.resetForm();\n      }}\n    >\n      {({ values, errors, touched, handleChange, handleSubmit, handleBlur }): JSX.Element => (\n        <form\n          style={{\n            display: 'flex',\n            alignItems: 'baseline',\n            justifyContent: 'space-around',\n          }}\n          onSubmit={handleSubmit}\n        >\n          <TextField\n            label=\"Add a text\"\n            style={{ width: '85%' }}\n            name=\"text\"\n            value={values.text}\n            onChange={handleChange}\n            error={Boolean(touched.text && errors.text)}\n            helperText={touched.text && errors.text}\n            onBlur={handleBlur}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            endIcon={<Icon>send</Icon>}\n            style={{ width: '10%' }}\n          >\n            Add\n          </Button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Form;\n","import {\n  Checkbox,\n  IconButton,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport { DeleteForever, Edit, Save } from '@material-ui/icons';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport type { DjangoTask } from '../app/slices/taskSlice';\nimport { removeTask, setIsUpdating, updateTask } from '../app/slices/taskSlice';\n\ninterface Props {\n  id: number;\n  text: string;\n  completed: boolean;\n  isUpdating: boolean;\n}\n\nconst Task: React.VFC<Props> = ({ id, text: task, completed, isUpdating }) => {\n  const [text, setText] = useState<string>(task);\n  const dispatch = useDispatch();\n  const textChangeHandler = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ): void => {\n    setText(event.target.value);\n  };\n\n  return (\n    <ListItem button>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          checked={completed}\n          tabIndex={-1}\n          disableRipple\n          onClick={(): PayloadAction<DjangoTask> =>\n            dispatch(updateTask({ id, text, completed: !completed }))\n          }\n        />\n      </ListItemIcon>\n      <ListItemText>\n        {isUpdating ? (\n          <TextField value={text} onChange={textChangeHandler} fullWidth />\n        ) : (\n          <Typography>{text}</Typography>\n        )}\n      </ListItemText>\n      <ListItemSecondaryAction>\n        {!isUpdating ? (\n          <>\n            <IconButton\n              edge=\"end\"\n              onClick={(): PayloadAction<number> => dispatch(setIsUpdating(id))}\n            >\n              <Edit color=\"primary\" />\n            </IconButton>\n            <IconButton edge=\"end\" onClick={(): PayloadAction<number> => dispatch(removeTask(id))}>\n              <DeleteForever color=\"secondary\" />\n            </IconButton>\n          </>\n        ) : (\n          <IconButton\n            edge=\"end\"\n            aria-label=\"comments\"\n            onClick={(): PayloadAction<DjangoTask> => dispatch(updateTask({ text, id, completed }))}\n          >\n            <Save color=\"primary\" />\n          </IconButton>\n        )}\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default Task;\n","import { List } from '@material-ui/core';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Task from '../components/Task';\nimport { getTask } from '../app/slices/taskSlice';\nimport { getTasks } from '../app/selectors/tasks';\n\nconst Tasks = (): JSX.Element => {\n  const dispatch = useDispatch();\n  const tasks = useSelector(getTasks);\n\n  useEffect(() => {\n    if (!tasks.length) {\n      dispatch(getTask());\n    }\n  });\n\n  return (\n    <List>\n      {tasks.map((task) => (\n        <Task\n          key={task.id}\n          id={task.id}\n          text={task.text}\n          completed={task.completed}\n          isUpdating={task.isUpdating}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default Tasks;\n","import { Container, LinearProgress, Paper, Typography } from '@material-ui/core';\nimport { getTasksLoading } from 'app/selectors/tasks';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport Form from './components/Form';\nimport Tasks from './containers/Tasks';\n\nconst App = (): JSX.Element => {\n  const isLoading = useSelector(getTasksLoading);\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h3\">To-Do App</Typography>\n        <Paper style={{ padding: 20 }}>\n          <Form />\n        </Paper>\n        {isLoading ? <LinearProgress /> : <Tasks />}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://edwardramirez.pythonanywhere.com',\n});\n\nexport default axiosInstance;\n","import type { DjangoTask } from '../app/slices/taskSlice';\nimport axiosInstance from '../axiosInstance';\n\nclass DjangoTodo {\n  static async getTasks(): Promise<DjangoTask[]> {\n    const response = await axiosInstance.get<DjangoTask[]>('/');\n    return response.data;\n  }\n\n  static async getTaskById(id: number): Promise<DjangoTask> {\n    const response = await axiosInstance.get<DjangoTask>(`/task/${id}`);\n    return response.data;\n  }\n\n  static async deleteTask(id: number): Promise<void> {\n    await axiosInstance.delete(`/task/${id}`);\n  }\n\n  static async updateTask(\n    id: number,\n    data: { text: string; completed: boolean }\n  ): Promise<DjangoTask> {\n    const response = await axiosInstance.put<DjangoTask>(`/task/${id}/`, data);\n    return response.data;\n  }\n\n  static async createTask(data: DjangoTask): Promise<DjangoTask> {\n    const response = await axiosInstance.post<DjangoTask>('/', data);\n    return response.data;\n  }\n}\n\nexport default DjangoTodo;\n","/* eslint-disable no-console */\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport type { CallEffect, PutEffect } from 'redux-saga/effects';\nimport type { PayloadAction } from '@reduxjs/toolkit';\nimport type { ErrorObject } from '../../types/models';\nimport type { DjangoTask } from '../../slices/taskSlice';\nimport {\n  addTask,\n  addTaskError,\n  addTaskSuccess,\n  getTask,\n  getTaskError,\n  getTaskSuccess,\n  removeTask,\n  updateTask,\n  updateTaskSuccess,\n} from '../../slices/taskSlice';\n\nimport DjangoTodo from '../../../api/djangoTodo';\n\nfunction* addTaskSaga({\n  payload: data,\n}: PayloadAction<DjangoTask>): Generator<CallEffect | PutEffect, void, DjangoTask> {\n  try {\n    const newTask = yield call([DjangoTodo, 'createTask'], data);\n    yield put(addTaskSuccess(newTask));\n  } catch (err) {\n    const error = err as ErrorObject;\n    yield put(addTaskError(error.message));\n  }\n}\n\nfunction* getTaskSaga(): Generator<CallEffect<DjangoTask[]> | PutEffect, void, DjangoTask[]> {\n  try {\n    const tasks = yield call([DjangoTodo, 'getTasks']);\n    yield put(getTaskSuccess(tasks));\n  } catch (err) {\n    const error = err as ErrorObject;\n    yield put(getTaskError(error.message));\n  }\n}\n\nfunction* removeTaskSaga({ payload: id }: PayloadAction<number>): Generator<CallEffect, void> {\n  try {\n    yield call([DjangoTodo, 'deleteTask'], id);\n  } catch (err) {\n    const error = err as ErrorObject;\n    console.log(error.message);\n  }\n}\n\nfunction* updateTaskSaga({\n  payload: { id, text, completed },\n}: PayloadAction<DjangoTask>): Generator<CallEffect | PutEffect, void, DjangoTask> {\n  try {\n    const task = yield call([DjangoTodo, 'updateTask'], id, {\n      text,\n      completed,\n    });\n    yield put(updateTaskSuccess(task));\n  } catch (err) {\n    const error = err as ErrorObject;\n    yield put(getTaskError(error.message));\n  }\n}\n\nexport default function* tasksSaga(): Generator {\n  try {\n    yield all([\n      takeEvery(addTask, addTaskSaga),\n      takeEvery(getTask, getTaskSaga),\n      takeEvery(removeTask, removeTaskSaga),\n      takeEvery(updateTask, updateTaskSaga),\n    ]);\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { all, fork } from 'redux-saga/effects';\nimport tasksSaga from './tasks/tasks';\n\nexport default function* rootSaga(): Generator {\n  try {\n    yield all([fork(tasksSaga)]);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport taskReducer from './slices/taskSlice';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    task: taskReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ thunk: false }).concat(sagaMiddleware),\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './app';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// https://github.com/conventional-changelog/commitlint#getting-started\n// https://typicode.github.io/husky/#/?id=create-a-hook\n// yarn add -D husky\n// yarn husky install\n// yarn husky add .husky/pre-commit \"yarn lint-staged\"\n// yarn husky add .husky/pre-commit \"yarn test\"\n// npm install --save-dev @commitlint/config-conventional @commitlint/cli\n// yarn husky add .husky/commit-msg 'npx --no-install commitlint --edit \"\"'\n// yarn add eslint\n// yarn add lint-staged\n// yarn eslint --init\n"],"sourceRoot":""}